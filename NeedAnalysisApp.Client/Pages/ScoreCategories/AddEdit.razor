@using NeedAnalysisApp.Client.Pages.Industries
@using NeedAnalysisApp.Client.Repositories.Interfaces
@using NeedAnalysisApp.Shared.Dto
@using MudBlazor
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;

<MudDialog>
    <DialogContent>
        @if (IsSecondStep)
        {
            <MudItem xs="12">
                @foreach (var scoreCategory in ScoreCategories)
                {
                    <MudItem Class="row">
                        <MudItem Class="col-4">@scoreCategory.Value</MudItem>

                        <MudItem Class="col-3">
                            <MudNumericField T="double" @bind-Value="@scoreCategory.PointsFrom" Label="From" Variant="Variant.Filled" Min="0.0" />
                        </MudItem>

                        <MudItem Class="col-3">
                            <MudNumericField T="double" @bind-Value="@scoreCategory.PointsTo" Label="To" Variant="Variant.Filled" Min="0.0" />
                        </MudItem>

                    </MudItem>
                }

            </MudItem>
        }
        else
        {
            <MudTextField T="string" @bind-Value="Model.Value" For="@(() => Model.Value)" Immediate="true" Label="Score category" Placeholder="Write a new score category" />
            <MudTextField T="string" Lines="5" @bind-Value="Model.Recommendation" For="@(() => Model.Recommendation)" Immediate="true" Label="Recommendation" Placeholder="Write a new recommendation" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton EndIcon="@(IsSecondStep ? Icons.Material.Outlined.ArrowBack : Icons.Material.Outlined.Cancel)" Color="Color.Default" OnClick="@OnCancelClick">
            @(IsSecondStep ? "Back" : "Cancel")
        </MudButton>
        <MudButton EndIcon="@(IsSecondStep ? Icons.Material.Outlined.Save : Icons.Material.Outlined.Start)" Color="Color.Success" OnClick="@OnSaveClick">
            @(IsSecondStep ? "Save" : "Continue")
        </MudButton>

    </DialogActions>
</MudDialog>

@code {
    [Inject] IAssessmentClientService _assessmentClientService { get; set; } = null!;

    [Parameter] public string? ScoreCategoryId { get; set; }

    public ScoreCategoryDto Model = new ScoreCategoryDto() { Value = "Test Value", Recommendation = "Test Recommendation", IsActive = true };

    List<ScoreCategoryDto> ScoreCategories = [];

    private MudForm? form;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;

    public bool IsSecondStep { get; set; } = false;

    private void Cancel() => MudDialog.Cancel();

    private void OnCancelClick()
    {
        if (IsSecondStep)
        {
            IsSecondStep = false; // Go back to the first step
        }
        else
        {
            MudDialog.Close(DialogResult.Ok(false));
        }
    }

    private async void OnSaveClick()
    {
        if (!IsSecondStep)
        {
            if (string.IsNullOrWhiteSpace(Model.UniqueId))
            {
                var test = await _assessmentClientService.CreateScoreCategory(Model);

                if (test.Success)
                {
                    IsSecondStep = true;

                    var result = await _assessmentClientService.GetAllScoreCategory();

                    if (result.Success)
                    {
                        ScoreCategories = JsonConvert.DeserializeObject<List<ScoreCategoryDto>>(result.Model.ToString() ?? string.Empty);

                        StateHasChanged();
                    }
                    else
                    {
                        foreach (var error in result.Errors)
                        {
                            Snackbar.Add(error.Message, Severity.Warning);
                        }
                    }
                }
                else
                {
                    foreach (var error in test.Errors)
                    {
                        Snackbar.Add(error.Message, Severity.Warning);
                    }
                }
            }
            else
            {
                var test = await _assessmentClientService.UpdateScoreCategory(Model);

                if (test.Success)
                {
                    IsSecondStep = true;

                    var result = await _assessmentClientService.GetAllScoreCategory();

                    if (result.Success)
                    {
                        ScoreCategories = JsonConvert.DeserializeObject<List<ScoreCategoryDto>>(result.Model.ToString() ?? string.Empty);

                        StateHasChanged();
                    }
                    else
                    {
                        foreach (var error in result.Errors)
                        {
                            Snackbar.Add(error.Message, Severity.Warning);
                        }
                    }
                }
                else
                {
                    foreach (var error in test.Errors)
                    {
                        Snackbar.Add(error.Message, Severity.Warning);
                    }
                }
            }
        }
        else
        {
            var result = await _assessmentClientService.CreateScoreCategories(ScoreCategories);

            if (result.Success)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    Snackbar.Add(error.Message, Severity.Warning);
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(ScoreCategoryId))
        {
            MudDialog.SetTitle("Add score category");
            Model = new ScoreCategoryDto() { Value = "Test Value", Recommendation = "Test Recommendation", IsActive = true };
        }
        else
        {
            var result = await _assessmentClientService.GetScoreCategoryWithId(ScoreCategoryId);

            if (result.Success)
            {
                var model = JsonConvert.DeserializeObject<ScoreCategoryDto>(result.Model.ToString() ?? string.Empty) ?? new();

                MudDialog.SetTitle($"Edit : {model.Value}");

                Model = model;
            }
        }

        StateHasChanged();
    }
}
